name: Flask API CI

on:
  push:
    branches:
      - main
    paths:
      - 'py/**'
      - '.github/workflows/flask-api-ci.yml'
      - Dockerfile
  workflow_dispatch:

permissions:
  id-token: write   # This is required for requesting the JWT     
  contents: read    # This is required for actions/checkout

env:
  TF_DIR: "./terraform"
  TF_VERSION: "1.6.3"
  AWS_REGION: eu-west-2
  AWS_ROLE_TO_ASSUME: arn:aws:iam::847399026905:role/gh-action-cloud-devops-mentorship-dev-role
  AWS_ROLE_SESSION_NAME: klyde_cloud_devops_mentorship

jobs:
  get-tf-outputs:
    name: Get Terraform Outputs
    runs-on: ubuntu-latest
    outputs:
      ECR_REPO_URL: ${{ steps.tf_outputs.outputs.ECR_REPO_URL }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: ${{ env.AWS_ROLE_SESSION_NAME }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Initialize Terraform Env
        working-directory: ${{ env.TF_DIR }}
        run: terraform init

      - name: Get Terraform Outputs
        id: tf_outputs
        working-directory: ${{ env.TF_DIR }}
        run: |
          ECR_REPO_URL=$(terraform output -raw ecr_repo_url)

          echo "ECR_REPO_URL=$ECR_REPO_URL" >> $GITHUB_OUTPUT

  build_tag_push:
    runs-on: ubuntu-latest
    needs: get-tf-outputs
    steps:
    - name: Checkout Repo
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
        role-session-name: ${{ env.AWS_ROLE_SESSION_NAME }}

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build Docker image
      env:
        ECR_REPOSITORY: ${{ needs.get-tf-outputs.outputs.ECR_REPO_URL }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        IMAGE_URI=${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG}}
        echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

        docker build -t ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG}} .
        docker tag ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG}} ${{ env.ECR_REPOSITORY }}:latest

    - name: Push Image
      env:
        ECR_REPOSITORY: ${{ needs.get-tf-outputs.outputs.ECR_REPO_URL }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker push ${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG}}
        docker push ${{ env.ECR_REPOSITORY }}:latest